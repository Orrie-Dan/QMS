import jsPDF from 'jspdf'
import { Quotation } from './store'

export const generateQuotationPDF = (quotation: Quotation): void => {
  const doc = new jsPDF()
  const pageWidth = doc.internal.pageSize.getWidth()
  const pageHeight = doc.internal.pageSize.getHeight()
  const margin = 20
  let yPosition = margin

  // Helper function to add text with word wrapping
  const addText = (text: string, x: number, y: number, options: any = {}) => {
    const maxWidth = pageWidth - x - margin
    const lines = doc.splitTextToSize(text, maxWidth)
    doc.text(lines, x, y)
    return y + (lines.length * (options.fontSize || 12) * 0.4) + 5
  }

  // Helper function to add a line
  const addLine = (y: number) => {
    doc.setLineWidth(0.5)
    doc.line(margin, y, pageWidth - margin, y)
    return y + 10
  }

  // Header
  doc.setFontSize(24)
  doc.setFont('helvetica', 'bold')
  yPosition = addText('QUOTATION', pageWidth / 2, yPosition, { align: 'center' })
  yPosition += 10

  // Quotation details
  doc.setFontSize(12)
  doc.setFont('helvetica', 'normal')
  yPosition = addText(`Quotation Number: ${quotation.quotationNumber}`, margin, yPosition)
  yPosition = addText(`Client: ${quotation.clientName}`, margin, yPosition)
  yPosition = addText(`Date: ${quotation.createdAt}`, margin, yPosition)
  yPosition = addText(`Valid Until: ${quotation.validUntil}`, margin, yPosition)
  yPosition = addText(`Status: ${quotation.status.toUpperCase()}`, margin, yPosition)
  
  yPosition = addLine(yPosition)

  // Items table header
  doc.setFont('helvetica', 'bold')
  yPosition = addText('ITEMS', margin, yPosition)
  yPosition += 5

  // Items table
  doc.setFont('helvetica', 'normal')
  doc.setFontSize(10)
  
  // Table headers
  const col1 = margin
  const col2 = margin + 100
  const col3 = margin + 140
  const col4 = margin + 170
  
  yPosition = addText('Description', col1, yPosition)
  doc.text('Qty', col2, yPosition - 5)
  doc.text('Unit Price', col3, yPosition - 5)
  doc.text('Total', col4, yPosition - 5)
  
  yPosition = addLine(yPosition - 10)

  // Items rows
  quotation.items.forEach((item) => {
    if (yPosition > pageHeight - 60) {
      doc.addPage()
      yPosition = margin
    }
    
    yPosition = addText(item.description, col1, yPosition)
    doc.text(item.quantity.toString(), col2, yPosition - 5)
    doc.text(`$${item.unitPrice.toFixed(2)}`, col3, yPosition - 5)
    doc.text(`$${item.total.toFixed(2)}`, col4, yPosition - 5)
    yPosition += 5
  })

  yPosition = addLine(yPosition)

  // Summary section
  doc.setFontSize(12)
  doc.setFont('helvetica', 'normal')
  
  const summaryX = pageWidth - 100
  yPosition = addText(`Subtotal:`, summaryX - 50, yPosition)
  doc.text(`$${quotation.subtotal.toFixed(2)}`, summaryX, yPosition - 5)
  yPosition += 5

  if (quotation.discount > 0) {
    yPosition = addText(`Discount:`, summaryX - 50, yPosition)
    doc.text(`-$${quotation.discount.toFixed(2)}`, summaryX, yPosition - 5)
    yPosition += 5
  }

  yPosition = addText(`Tax (${quotation.taxRate}%):`, summaryX - 50, yPosition)
  doc.text(`$${quotation.taxAmount.toFixed(2)}`, summaryX, yPosition - 5)
  yPosition += 5

  // Total
  doc.setFont('helvetica', 'bold')
  doc.setFontSize(14)
  yPosition = addText(`TOTAL:`, summaryX - 50, yPosition)
  doc.text(`$${quotation.total.toFixed(2)}`, summaryX, yPosition - 5)
  yPosition += 10

  // Notes section
  if (quotation.notes) {
    yPosition = addLine(yPosition)
    doc.setFont('helvetica', 'bold')
    doc.setFontSize(12)
    yPosition = addText('NOTES:', margin, yPosition)
    doc.setFont('helvetica', 'normal')
    yPosition = addText(quotation.notes, margin, yPosition)
  }

  // Footer
  const footerY = pageHeight - 20
  doc.setFontSize(8)
  doc.setFont('helvetica', 'normal')
  doc.text('Generated by QMS', margin, footerY)
  doc.text(`Page 1 of 1`, pageWidth - 50, footerY)

  // Download the PDF
  doc.save(`quotation-${quotation.quotationNumber}.pdf`)
}

export const generateQuotationPDFFromElement = async (elementId: string, quotation: Quotation): Promise<void> => {
  const element = document.getElementById(elementId)
  if (!element) {
    throw new Error('Element not found')
  }

  const { default: html2canvas } = await import('html2canvas')
  const canvas = await html2canvas(element, {
    scale: 2,
    useCORS: true,
    allowTaint: true,
    backgroundColor: '#ffffff'
  })

  const imgData = canvas.toDataURL('image/png')
  const doc = new jsPDF('p', 'mm', 'a4')
  const pageWidth = doc.internal.pageSize.getWidth()
  const pageHeight = doc.internal.pageSize.getHeight()
  const imgWidth = pageWidth
  const imgHeight = (canvas.height * pageWidth) / canvas.width

  let heightLeft = imgHeight
  let position = 0

  doc.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight)
  heightLeft -= pageHeight

  while (heightLeft >= 0) {
    position = heightLeft - imgHeight
    doc.addPage()
    doc.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight)
    heightLeft -= pageHeight
  }

  doc.save(`quotation-${quotation.quotationNumber}.pdf`)
}